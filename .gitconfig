[alias]
    a = commit --amend
    allfiles = "!f() { git log --name-only --diff-filter=A --pretty=format: | sort -u; }; f"
    cfg = config --list
    changedfiles = "diff-tree --no-commit-id -r --name-only"
    cam = commit -am
    cm = commit -m
    co = checkout
    cob = checkout -b
    discard = reset HEAD --hard
    discardchunk = checkout -p 
    nuke = !git reset --hard && fit clean -f -d
    l = "log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
    ll = "!f() { \
		comparison_branch=$( \
		    for branch in origin/development development origin/main main origin/master master; do \
			if git show-ref --verify --quiet refs/remotes/$branch || git show-ref --verify --quiet refs/heads/$branch; then \
			    echo $branch; \
			    break; \
			fi; \
		    done \
		); \
		if [ $# -eq 0 ]; then \
			a="@"; \
			b=$comparison_branch; \
		elif [ $# -eq 1 ]; then \
			a="@"; \
			b=$1; \
		else \
			a=$2; \
			b=$1; \
		fi; \
		root_commit=$(git rev-list $a --not $b --reverse | head -n 1); \
		git l ^$root_commit~2 $a $b; \
		}; f"  
    	bl = "!f() { \
		comparison_branch=$( \
		    for branch in origin/development development origin/main main origin/master master; do \
			if git show-ref --verify --quiet refs/remotes/$branch || git show-ref --verify --quiet refs/heads/$branch; then \
			    echo $branch; \
			    break; \
			fi; \
		    done \
		); \
		if [ -z \"$comparison_branch\" ]; then \
		    echo \"No reference branch found from the specified list.\" >&2; \
		    return 1; \
		fi; \
		echo \"  Branch                                   | Last Commit                               | Ahead / behind '$comparison_branch'\"; \
		echo \"  ---------------------------------------- | ----------------------------------------- | ---------------------------------\"; \
		git for-each-ref --sort=-committerdate --format=\"%(if)%(HEAD)%(then)* %(else)  %(end)%(if:equals=refs/remotes)%(refname:rstrip=-2)%(then)%(color:dim)%(end)%(align:40)%(refname:short)%(end)%(if:equals=refs/remotes)%(refname:rstrip=-2)%(then)%(color:reset)%(end) | %(align:21)%(committerdate:short) (%(objectname:short))%(end) %(align:20)%(authorname)%(end)| %(ahead-behind:$comparison_branch)\" refs/heads refs/remotes; \
		}; f"
    ps = push
    psf = push --force-with-lease
    others = "ls-files --others --ignored --exclude-from=.gitignore"
    rmuntracked = clean -df
    root = rev-parse --show-toplevel
    s = status
    searchfiles = "log --name-status --source --all -S" 
    searchtext = "!f() { git grep \"$*\" $(git rev-list --all); }; f"
    uncommit = reset --soft HEAD^
    unstage = reset HEAD --
    wip = "!f() { git add . && git commit -m 'Work in progress'; }; f"

[pull]
	ff = only
[rebase]
	autosquash = true
[rerere]
	enabled = true

[color]
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
